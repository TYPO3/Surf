#!/usr/bin/env php
<?php

/*
 * This file is part of TYPO3 Surf.
 *
 * For the full copyright and license information, please view the LICENSE.txt
 * file that was distributed with this source code.
 */

use Custom\MyExtension;
use SelfUpdate\SelfUpdateCommand;
use TYPO3\Surf\Cli\Symfony\ConsoleApplication;
use TYPO3\Surf\Cli\Symfony\ConsoleKernel;

requireAutoloader();


$kernel = new ConsoleKernel('prod');
$vendorPackages = array_map(
    fn($dir) => json_decode(file_get_contents($dir . '/composer/installed.json'), true)['packages'] ?? [], 
    array_keys(\Composer\Autoload\ClassLoader::getRegisteredLoaders())
);
foreach ($vendorPackages as $packages) {
    foreach ($packages as $package) {
        if (
            'typo3-surf-exstension' == $package['type']
            && null !== ($extension = $package['extra']['typo3-surf']['extension'] ?? null)
            && class_exists($extension)
        ) {
            $kernel->addExtension(new $extension());
        }
    }
}

$kernel->boot();
$container = $kernel->getContainer();
/** @var ConsoleApplication $application */
$application = $container->get(ConsoleApplication::class);
$commandNamesToHide = ['list', 'completion', 'help'];
foreach ($commandNamesToHide as $commandNameToHide) {
    $commandToHide = $application->get($commandNameToHide);
    $commandToHide->setHidden(true);
}
$application->add(new SelfUpdateCommand('TYPO3 Surf', $application->getVersion(), 'typo3/surf'));
$application->run();

function requireAutoloader()
{
    $autoloadPaths = [
        // Package was included as a library
        __DIR__ . '/../../../autoload.php',
        // Local package usage
        __DIR__ . '/../vendor/autoload.php',
        // Local package in packages folder
        __DIR__ . '/../../../vendor/autoload.php',
    ];
    foreach ($autoloadPaths as $path) {
        if (file_exists($path)) {
            return include $path;
        }
    }

    $msg = 'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -sS https://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL;
    fwrite(STDERR, $msg);
    exit(1);
}
